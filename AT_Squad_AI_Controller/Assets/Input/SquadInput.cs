//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Input/SquadInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SquadInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SquadInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SquadInput"",
    ""maps"": [
        {
            ""name"": ""SquadController"",
            ""id"": ""98bc655a-168a-4216-b265-4f8c0701bb64"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""58a0d349-2941-4e05-a904-e8c352f67ffb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Retreat"",
                    ""type"": ""Button"",
                    ""id"": ""ece01223-0e7e-4cc8-b582-c820b2bba3bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Suppressed"",
                    ""type"": ""Button"",
                    ""id"": ""6b79c95b-fadb-481f-a628-43034a73ef79"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CloseGuard"",
                    ""type"": ""Button"",
                    ""id"": ""75ab6fcd-e54c-48ae-99b5-4ea4edd98ce3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FarGuard"",
                    ""type"": ""Button"",
                    ""id"": ""97fc6964-7e14-4f7f-a86e-1042f01248b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DoubleMove"",
                    ""type"": ""Button"",
                    ""id"": ""a504270d-56f3-4c3d-a66d-62dc6bdbd30b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""MultiTap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CombatState"",
                    ""type"": ""Button"",
                    ""id"": ""8c54a6a3-84e8-4a96-9142-756b204e58fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0f47c29e-f5bf-4a7d-8c36-aee132816efd"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20903b1e-5820-418b-ac4d-e17c0fa9d424"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Retreat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""050cf671-cbea-4df9-9edf-8d5bcf33035c"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Suppressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26c9aa0d-9965-4179-8c21-888fa8382775"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseGuard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b27126a3-dd31-44cc-aa15-c908bc16ede5"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FarGuard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec838a11-49f1-405c-9354-28b0c611108d"",
                    ""path"": ""<Mouse>/backButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""DoubleMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4072bf3-d7b3-4e6d-afc2-6ff10ec4936c"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CombatState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // SquadController
        m_SquadController = asset.FindActionMap("SquadController", throwIfNotFound: true);
        m_SquadController_Move = m_SquadController.FindAction("Move", throwIfNotFound: true);
        m_SquadController_Retreat = m_SquadController.FindAction("Retreat", throwIfNotFound: true);
        m_SquadController_Suppressed = m_SquadController.FindAction("Suppressed", throwIfNotFound: true);
        m_SquadController_CloseGuard = m_SquadController.FindAction("CloseGuard", throwIfNotFound: true);
        m_SquadController_FarGuard = m_SquadController.FindAction("FarGuard", throwIfNotFound: true);
        m_SquadController_DoubleMove = m_SquadController.FindAction("DoubleMove", throwIfNotFound: true);
        m_SquadController_CombatState = m_SquadController.FindAction("CombatState", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SquadController
    private readonly InputActionMap m_SquadController;
    private ISquadControllerActions m_SquadControllerActionsCallbackInterface;
    private readonly InputAction m_SquadController_Move;
    private readonly InputAction m_SquadController_Retreat;
    private readonly InputAction m_SquadController_Suppressed;
    private readonly InputAction m_SquadController_CloseGuard;
    private readonly InputAction m_SquadController_FarGuard;
    private readonly InputAction m_SquadController_DoubleMove;
    private readonly InputAction m_SquadController_CombatState;
    public struct SquadControllerActions
    {
        private @SquadInput m_Wrapper;
        public SquadControllerActions(@SquadInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_SquadController_Move;
        public InputAction @Retreat => m_Wrapper.m_SquadController_Retreat;
        public InputAction @Suppressed => m_Wrapper.m_SquadController_Suppressed;
        public InputAction @CloseGuard => m_Wrapper.m_SquadController_CloseGuard;
        public InputAction @FarGuard => m_Wrapper.m_SquadController_FarGuard;
        public InputAction @DoubleMove => m_Wrapper.m_SquadController_DoubleMove;
        public InputAction @CombatState => m_Wrapper.m_SquadController_CombatState;
        public InputActionMap Get() { return m_Wrapper.m_SquadController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SquadControllerActions set) { return set.Get(); }
        public void SetCallbacks(ISquadControllerActions instance)
        {
            if (m_Wrapper.m_SquadControllerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_SquadControllerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_SquadControllerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_SquadControllerActionsCallbackInterface.OnMove;
                @Retreat.started -= m_Wrapper.m_SquadControllerActionsCallbackInterface.OnRetreat;
                @Retreat.performed -= m_Wrapper.m_SquadControllerActionsCallbackInterface.OnRetreat;
                @Retreat.canceled -= m_Wrapper.m_SquadControllerActionsCallbackInterface.OnRetreat;
                @Suppressed.started -= m_Wrapper.m_SquadControllerActionsCallbackInterface.OnSuppressed;
                @Suppressed.performed -= m_Wrapper.m_SquadControllerActionsCallbackInterface.OnSuppressed;
                @Suppressed.canceled -= m_Wrapper.m_SquadControllerActionsCallbackInterface.OnSuppressed;
                @CloseGuard.started -= m_Wrapper.m_SquadControllerActionsCallbackInterface.OnCloseGuard;
                @CloseGuard.performed -= m_Wrapper.m_SquadControllerActionsCallbackInterface.OnCloseGuard;
                @CloseGuard.canceled -= m_Wrapper.m_SquadControllerActionsCallbackInterface.OnCloseGuard;
                @FarGuard.started -= m_Wrapper.m_SquadControllerActionsCallbackInterface.OnFarGuard;
                @FarGuard.performed -= m_Wrapper.m_SquadControllerActionsCallbackInterface.OnFarGuard;
                @FarGuard.canceled -= m_Wrapper.m_SquadControllerActionsCallbackInterface.OnFarGuard;
                @DoubleMove.started -= m_Wrapper.m_SquadControllerActionsCallbackInterface.OnDoubleMove;
                @DoubleMove.performed -= m_Wrapper.m_SquadControllerActionsCallbackInterface.OnDoubleMove;
                @DoubleMove.canceled -= m_Wrapper.m_SquadControllerActionsCallbackInterface.OnDoubleMove;
                @CombatState.started -= m_Wrapper.m_SquadControllerActionsCallbackInterface.OnCombatState;
                @CombatState.performed -= m_Wrapper.m_SquadControllerActionsCallbackInterface.OnCombatState;
                @CombatState.canceled -= m_Wrapper.m_SquadControllerActionsCallbackInterface.OnCombatState;
            }
            m_Wrapper.m_SquadControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Retreat.started += instance.OnRetreat;
                @Retreat.performed += instance.OnRetreat;
                @Retreat.canceled += instance.OnRetreat;
                @Suppressed.started += instance.OnSuppressed;
                @Suppressed.performed += instance.OnSuppressed;
                @Suppressed.canceled += instance.OnSuppressed;
                @CloseGuard.started += instance.OnCloseGuard;
                @CloseGuard.performed += instance.OnCloseGuard;
                @CloseGuard.canceled += instance.OnCloseGuard;
                @FarGuard.started += instance.OnFarGuard;
                @FarGuard.performed += instance.OnFarGuard;
                @FarGuard.canceled += instance.OnFarGuard;
                @DoubleMove.started += instance.OnDoubleMove;
                @DoubleMove.performed += instance.OnDoubleMove;
                @DoubleMove.canceled += instance.OnDoubleMove;
                @CombatState.started += instance.OnCombatState;
                @CombatState.performed += instance.OnCombatState;
                @CombatState.canceled += instance.OnCombatState;
            }
        }
    }
    public SquadControllerActions @SquadController => new SquadControllerActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface ISquadControllerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRetreat(InputAction.CallbackContext context);
        void OnSuppressed(InputAction.CallbackContext context);
        void OnCloseGuard(InputAction.CallbackContext context);
        void OnFarGuard(InputAction.CallbackContext context);
        void OnDoubleMove(InputAction.CallbackContext context);
        void OnCombatState(InputAction.CallbackContext context);
    }
}
